# Basic HAL config file for NVEM controller board running Remora firmware
# Configured for 3 joints (X, Y, Z axes) with home and limit switches

loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

# load the Remora real-time component
	loadrt remora-eth-3.0 PRU_base_freq=40000


# estop and SPI comms enable and feedback

	net user-enable-out		<= iocontrol.0.user-enable-out		=> remora.enable
	net user-request-enable <= iocontrol.0.user-request-enable	=> remora.reset
	net remora-status 		<= remora.status 				=> iocontrol.0.emc-enable-in

# add the remora and motion functions to threads

	addf remora.read 			servo-thread
	addf motion-command-handler servo-thread
	addf motion-controller 		servo-thread
	addf remora.update-freq 	servo-thread
	addf remora.write 			servo-thread

# joint 0 setup (X axis)

	setp remora.joint.0.scale 		[JOINT_0]SCALE
	setp remora.joint.0.maxaccel 	[JOINT_0]STEPGEN_MAXACCEL
	setp remora.joint.0.pgain		[JOINT_0]P_GAIN
	setp remora.joint.0.ff1gain	[JOINT_0]FF1_GAIN
	setp remora.joint.0.deadband 	[JOINT_0]DEADBAND
	

	net j0pos-cmd 	 <=	joint.0.motor-pos-cmd 	=> remora.joint.0.pos-cmd
	net j0pos-fb 	 <= remora.joint.0.pos-fb 	=> joint.0.motor-pos-fb
	net j0enable     <= joint.0.amp-enable-out  => remora.joint.0.enable	

# joint 1 setup (Y axis)

	setp remora.joint.1.scale 		[JOINT_1]SCALE
	setp remora.joint.1.maxaccel 	[JOINT_1]STEPGEN_MAXACCEL
	setp remora.joint.1.pgain		[JOINT_1]P_GAIN
	setp remora.joint.1.ff1gain	[JOINT_1]FF1_GAIN
	setp remora.joint.1.deadband 	[JOINT_1]DEADBAND
	

	net j1pos-cmd 	 <=	joint.1.motor-pos-cmd 	=> remora.joint.1.pos-cmd
	net j1pos-fb 	 <=	remora.joint.1.pos-fb 	=> joint.1.motor-pos-fb
	net j1enable     <= joint.1.amp-enable-out  => remora.joint.1.enable		

# joint 2 setup (Z axis)

	setp remora.joint.2.scale 		[JOINT_2]SCALE
	setp remora.joint.2.maxaccel 	[JOINT_2]STEPGEN_MAXACCEL
	setp remora.joint.2.pgain		[JOINT_2]P_GAIN
	setp remora.joint.2.ff1gain	[JOINT_2]FF1_GAIN
	setp remora.joint.2.deadband 	[JOINT_2]DEADBAND
	

	net j2pos-cmd 	 <=	joint.2.motor-pos-cmd 	=> remora.joint.2.pos-cmd
	net j2pos-fb 	 <=	remora.joint.2.pos-fb 	=> joint.2.motor-pos-fb
	net j2enable     <= joint.2.amp-enable-out  => remora.joint.2.enable		

# end-stops and inputs

	#net X_HOME 	remora.input.00 	=> joint.0.home-sw-in 
	#net Y_HOME 	remora.input.01 	=> joint.1.home-sw-in 
	#net Z_HOME 	remora.input.02 	=> joint.2.home-sw-in 
	#net IN1 	remora.input.03 	#=> 
	#net IN2 	remora.input.04 	#=> 
	#net IN3 	remora.input.05 	#=> 
	#net USR_BTN	remora.input.06 	#=> 

# stepgen enable and other outputs

	#net j0enable => remora.output.00 	
	#net OUT1 	remora.output.01 	#=> 
	#net OUT2 	remora.output.02 	#=> 
	
# spindle DAC 0-10V control
	loadrt abs count=4
	addf abs.0 servo-thread

	loadrt scale count=1
	addf scale.0 servo-thread
	
	setp scale.0.gain 1 #this will make m3 s100 give 100% output and m3 s1 1%
	net spindle-speed-scale spindle.0.speed-out => scale.0.in
	net spindle-speed-abs scale.0.out => abs.0.in
	net spindle-speed-DAC abs.0.out  => remora.SP.0		# duty cycle
# Variable PWM period for spindle DAC
	addf abs.1 servo-thread
	net spindle-dac-period-us abs.1.in
	net spindle-dac-period abs.1.out => remora.SP.1		# variable period
	
# test fixed duty cycle for second PWM
	addf abs.2 servo-thread
	net test-second-pwm-duty-percent abs.2.in
	net test-second-pwm-duty abs.2.out => remora.SP.2
	
